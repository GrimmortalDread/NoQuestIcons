name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup .NET (LTS runtime + 9.0 SDK)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Install Dalamud dev libs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.xlcore"
          mkdir -p "$HOME/.xlcore/dalamud/Hooks/dev"
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          unzip -o dalamud.zip -d "$HOME/.xlcore/dalamud/Hooks/dev" >/dev/null
          echo ">> Installed Dalamud dev libs to $HOME/.xlcore/dalamud/Hooks/dev"

      - name: Restore
        run: dotnet restore NoQuestIcons.csproj

      - name: Build
        env:
          VERSION: ${{ github.ref_name }} # e.g. v1.2.6
        run: |
          set -euo pipefail
          VER="${VERSION#v}"
          echo "Building version: $VER"
          dotnet build NoQuestIcons.csproj \
            --configuration Release \
            --no-restore \
            -p:Version="$VER"

      - name: Show build tree (debug)
        run: |
          echo "== Project root =="
          ls -la
          echo "== bin/Release =="
          ls -la bin/Release || true

      - name: Package outputs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output

          # DLL (SDK places it directly in bin/Release)
          cp "bin/Release/NoQuestIcons.dll" "output/NoQuestIcons.dll" 

          # Include manifest if present (SDK can embed it; having a loose one is fine)
          if [ -f "NoQuestIcons.json" ]; then
            cp "NoQuestIcons.json" "output/NoQuestIcons.json"
          fi

          # Stable ZIP name expected by pluginmaster.json (…/releases/latest/download/NoQuestIcons.zip)
          (cd output && zip -r "NoQuestIcons.zip" .)

      - name: Guardrail – validate metadata (non-fatal)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "Checking NoQuestIcons.json exists in repo root…"
          if [ ! -f "NoQuestIcons.json" ]; then
            echo "::warning file=NoQuestIcons.json::NoQuestIcons.json missing in repo root (build still continues)"
          fi

          echo "Checking pluginmaster.json…"
          if [ ! -f "pluginmaster.json" ]; then
            echo "::warning file=pluginmaster.json::pluginmaster.json missing (build still continues)"
          else
            EXPECTED_URL="https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/NoQuestIcons.zip"
            if ! grep -q "$EXPECTED_URL" pluginmaster.json; then
              echo "::warning file=pluginmaster.json::DownloadLinkInstall/Update should be $EXPECTED_URL"
            fi
            echo "HEAD-check IconUrl:"
            grep -o '"IconUrl": *"[^"]*"' pluginmaster.json || true
          fi

      - name: Upload artifact (CI archive)
        uses: actions/upload-artifact@v4
        with:
          name: NoQuestIcons-${{ github.ref_name }}
          path: output/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: NoQuestIcons ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            output/NoQuestIcons.dll
            output/NoQuestIcons.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
