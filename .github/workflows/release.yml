name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout the tagged commit (default)
      - name: Checkout (tag)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup .NET (LTS runtime + SDK 9)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      # 3) Install Dalamud dev libs so the SDK can resolve references
      - name: Install Dalamud dev libs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.xlcore"
          mkdir -p "$HOME/.xlcore/dalamud/Hooks/dev"
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          unzip -o dalamud.zip -d "$HOME/.xlcore/dalamud/Hooks/dev" >/dev/null
          echo ">> Installed Dalamud dev libs to $HOME/.xlcore/dalamud/Hooks/dev"

      # 4) Restore and build (override Version from git tag)
      - name: Restore
        run: dotnet restore NoQuestIcons.csproj

      - name: Build (from tag)
        env:
          VERSION: ${{ github.ref_name }}   # e.g. v1.2.3
        run: |
          VER="${VERSION#v}"                # -> 1.2.3
          echo "Building version: $VER"
          dotnet build NoQuestIcons.csproj \
            --configuration Release \
            --no-restore \
            -p:Version="$VER"

      # 5) Show tree for quick debugging if needed
      - name: Show build tree
        run: |
          echo "== bin/Release =="
          ls -la bin/Release || true

      # 6) Package release assets (DLL/PDB + patched pluginmaster.json)
      - name: Package assets
        shell: bash
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          VER="${VERSION#v}"
          TAG="v${VER}"
          mkdir -p output

          # SDK produces these at bin/Release (no net* folder)
          cp "bin/Release/NoQuestIcons.dll" "output/NoQuestIcons.dll"
          if [ -f "bin/Release/NoQuestIcons.pdb" ]; then
            cp "bin/Release/NoQuestIcons.pdb" "output/NoQuestIcons.pdb"
          fi

          # Patch a copy of pluginmaster.json for the release assets
          cp pluginmaster.json output/pluginmaster.json

          sed -i "s|\"AssemblyVersion\": *\"[^\"]*\"|\"AssemblyVersion\": \"${VER}\"|" output/pluginmaster.json
          sed -i "s|\"DownloadLinkInstall\": *\"[^\"]*\"|\"DownloadLinkInstall\": \"https://github.com/${{ github.repository }}/releases/download/${TAG}/NoQuestIcons.dll\"|" output/pluginmaster.json
          sed -i "s|\"DownloadLinkUpdate\": *\"[^\"]*\"|\"DownloadLinkUpdate\": \"https://github.com/${{ github.repository }}/releases/download/${TAG}/NoQuestIcons.dll\"|" output/pluginmaster.json

          echo "Patched pluginmaster.json (release asset):"
          cat output/pluginmaster.json

          # Optional zip
          (cd output && zip -r "NoQuestIcons-${TAG}.zip" .)

      # 7) Attach assets to the GitHub Release for this tag
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: NoQuestIcons ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            output/NoQuestIcons.dll
            output/NoQuestIcons.pdb
            output/pluginmaster.json
            output/NoQuestIcons-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8) Also update pluginmaster.json on main so your repo URL always serves latest metadata
      - name: Checkout main for pluginmaster update
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          path: repo_main

      - name: Patch pluginmaster.json on main and push
        shell: bash
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          VER="${VERSION#v}"
          TAG="v${VER}"
          cd repo_main

          # Patch repo copy
          sed -i "s|\"AssemblyVersion\": *\"[^\"]*\"|\"AssemblyVersion\": \"${VER}\"|" pluginmaster.json
          sed -i "s|\"DownloadLinkInstall\": *\"[^\"]*\"|\"DownloadLinkInstall\": \"https://github.com/${{ github.repository }}/releases/download/${TAG}/NoQuestIcons.dll\"|" pluginmaster.json
          sed -i "s|\"DownloadLinkUpdate\": *\"[^\"]*\"|\"DownloadLinkUpdate\": \"https://github.com/${{ github.repository }}/releases/download/${TAG}/NoQuestIcons.dll\"|" pluginmaster.json

          echo "Patched pluginmaster.json (repo main):"
          cat pluginmaster.json

          # Commit only if changed
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add pluginmaster.json
            git commit -m "chore: update pluginmaster.json for ${TAG}"
            git push origin main
          else
            echo "No changes to commit on main."
          fi
