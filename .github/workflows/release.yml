name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Setup .NET (LTS runtime + 9.0 SDK)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Install Dalamud dev libs
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.xlcore"
          mkdir -p "$HOME/.xlcore/dalamud/Hooks/dev"
          curl -L https://goatcorp.github.io/dalamud-distrib/latest.zip -o dalamud.zip
          unzip -o dalamud.zip -d "$HOME/.xlcore/dalamud/Hooks/dev" >/dev/null
          echo ">> Installed Dalamud dev libs to $HOME/.xlcore/dalamud/Hooks/dev"

      - name: Restore
        run: dotnet restore NoQuestIcons.csproj

      - name: Build
        env:
          VERSION: ${{ github.ref_name }} # e.g. v1.2.5
        run: |
          set -euo pipefail
          VER="${VERSION#v}"
          echo "Building version: $VER"
          dotnet build NoQuestIcons.csproj --configuration Release --no-restore -p:Version="$VER"

      - name: Guardrail: validate manifests and URLs (read-only)
        shell: bash
        run: |
          set -euo pipefail

          test -f "NoQuestIcons.json" || { echo "NoQuestIcons.json missing in repo root"; exit 1; }
          jq -e 'has("Name") and has("Author") and has("InternalName") and has("Description")' NoQuestIcons.json >/dev/null || {
            echo "NoQuestIcons.json is missing required fields"; exit 1; }

          test -f "pluginmaster.json" || { echo "pluginmaster.json missing"; exit 1; }
          jq -e '.[0].InternalName == "NoQuestIcons"' pluginmaster.json >/dev/null || {
            echo "pluginmaster.json InternalName mismatch"; exit 1; }

          # Require stable DLL URLs so latest always works
          jq -e '.[0].DownloadLinkInstall=="https://github.com/GrimmortalDread/NoQuestIcons/releases/latest/download/NoQuestIcons.dll"' pluginmaster.json >/dev/null || {
            echo "DownloadLinkInstall must be releases/latest/download/NoQuestIcons.dll"; exit 1; }
          jq -e '.[0].DownloadLinkUpdate=="https://github.com/GrimmortalDread/NoQuestIcons/releases/latest/download/NoQuestIcons.dll"' pluginmaster.json >/dev/null || {
            echo "DownloadLinkUpdate must be releases/latest/download/NoQuestIcons.dll"; exit 1; }

          # Icon should be a raw URL
          jq -r '.[0].IconUrl' pluginmaster.json | grep -E '^https://raw\.githubusercontent\.com/' >/dev/null || {
            echo "IconUrl must be a raw.githubusercontent.com URL"; exit 1; }

      - name: Package outputs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output

          # SDK drops directly into bin/Release
          cp "bin/Release/NoQuestIcons.dll" "output/NoQuestIcons.dll" 

          if [ -f "bin/Release/NoQuestIcons.pdb" ]; then
            cp "bin/Release/NoQuestIcons.pdb" "output/NoQuestIcons.pdb"
          fi

          # Optional: include manifest in the zip (installer downloads the DLL from URLs)
          cp "NoQuestIcons.json" "output/NoQuestIcons.json"

          ZIP_NAME="NoQuestIcons-${{ github.ref_name }}.zip"
          (cd output && zip -r "$ZIP_NAME" .)

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: NoQuestIcons-${{ github.ref_name }}
          path: output/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: NoQuestIcons ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            output/NoQuestIcons.dll
            output/NoQuestIcons.pdb
            output/NoQuestIcons-${{ github.ref_name }}.zip
            pluginmaster.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
